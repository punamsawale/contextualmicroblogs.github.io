'use strict'

const Logger = require('../../logger')
const semver = require('semver')
const Util = require('../../util')

/**
 * log4js Instrumentation
 * https://www.npmjs.com/package/log4js
 * @param log4js
 * @param tracer
 * @param shimmer
 * @param version
 */
module.exports = function (finish, instrumenter, version, moduleName, pkgName) {
  let shimmer = instrumenter.getShimmer()
  let tracer = instrumenter.getTracer()

  if (!semver.satisfies(version, '<= 1')) {
    return finish
  }

  return shimmer.wrap(finish, null, function wrapCommonCallback (original) {
    return function wrappedCommonCallback () {
      const http = require('http')
      let args = Util.argsToArray.apply(this, arguments)
      let requestIndex = 0
      let requestResponseObject = args[requestIndex]
      let activeTransaction = tracer.getActiveTransaction()

      if (activeTransaction &&
        Util.isObject(requestResponseObject) &&
        (requestResponseObject instanceof http.IncomingMessage || requestResponseObject instanceof http.ServerResponse)
      ) {
        createTransactionInfo(activeTransaction, requestResponseObject)
      }
      return original.apply(this, args)
    }
  })

  /**
   * Stores transaction info in request and
   * response objects
   * @param {*} transaction
   * @param {*} request
   * @param {*} response
   */
  function createTransactionInfo (transaction, requestResponse) {
    if (!requestResponse) {
      Logger.debug('Serverless-Http: Missing request or response object! Not storing transaction info.')
      return
    }

    var txInfo = {
      transaction: transaction,
      spanStack: [], // Need to observe
      errorHandled: false,
      error: null
    }

    requestResponse['txInfo'] = txInfo // Make this into constant

    Logger.debug(
      'Serverless-Http: Stored transaction %s information on request or response',
      transaction.id()
    )
  }
}
